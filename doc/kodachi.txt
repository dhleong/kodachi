*kodachi*             For NVIM v0.7.0             Last change: 2023 January 23

==============================================================================
Table of Contents                                  *kodachi-table-of-contents*

1. Quick Start                                           |kodachi-quick-start|
2. Aliases, Triggers, and Prompts     |kodachi-aliases,-triggers,-and-prompts|
  - Simple Matchers                                  |kodachi-simple-matchers|
  - Regex Matchers                                    |kodachi-regex-matchers|
  - Functional match handlers              |kodachi-functional-match-handlers|
3. Scripting                                               |kodachi-scripting|
  - with_connection                                  |kodachi-with_connection|
  - KodachiState                                        |kodachi-kodachistate|

==============================================================================
1. Quick Start                                           *kodachi-quick-start*

Once installed, the quickest way to get started is with the `:KodachiConnect`
command.

In general you will want to create lua script files to manage your config for a
server. You may consider a naming convention to simplify auto-sourcing them,
since kodachi supports hot-reloading configs for an active connection; I use
`.kd.lua`.

Here’s a sample script:

>
    local kodachi = require 'kodachi'
    
    local uri = 'myfavorite.game:1234'
    
    kodachi.with_connection(uri, function(s)
      -- `s` is the "State" object, and has some goodies, like local mappings:
      s:map('gl', 'look')
    
      -- ... Triggers
      s:trigger('Hello!', function()
        s:send('say Hello yourself!')
      end
    
      -- ... and more
      s:prompt('> ')
    end)
<


==============================================================================
2. Aliases, Triggers, and Prompts     *kodachi-aliases,-triggers,-and-prompts*

Kodachi provides rich support for aliases, triggers, and prompts. Aliases can
format the output directly using matchers, or the output can be computed by lua
function.

Matchers power aliases, prompts, and triggers. Kodachi supports two variants:
simple and regex. |kodachi-simple-matchers| should be intuitive, with familiar
syntax, while |kodachi-regex| gives you the full power to match exactly what
you want. Regex matchers are powered by the Rust regex
<https://docs.rs/regex/latest/regex/> crate; in particular, be aware that this
crate does not support zero-width lookaround assertions.

SIMPLE MATCHERS                                      *kodachi-simple-matchers*

Simple matchers use `$`-prefixed symbols to capture some input; aliases may
also use the same syntax to reference those matches. For example:

>
    -- This will capture (for example) "grill a burrito" and expand to "put a burrito on grill"
    s:alias('grill $food', 'put $food on grill')
<


Aliases typically can be expanded into other aliases. To reduce ambiguity, you
may want your alias only to match at the beginning of the line. This can be
done similar to regex with the `^` symbol:

>
    -- This will NOT match "say grill sandwich" (which *would* be matched above)
    s:alias('^grill $food', 'put $food on grill')
<


Also supported is indexed symbols (eg: `$1`, `$2`, etc.) and disambiguated
symbols, wrapping a name with curly braces (eg: `${food}`), which may be useful
if you need to capture text that immediately preceeds other text.

REGEX MATCHERS                                        *kodachi-regex-matchers*

>
    local m = require 'kodachi.matchers'
    
    s:alias(m.regex '^grill ([a-z]+)', 'put $1 on grill')
<


FUNCTIONAL MATCH HANDLERS                  *kodachi-functional-match-handlers*

This syntax works for both Aliases and Triggers. The "context" of the match is
provided as the first argument to the function. For example:

>
    s:alias('^grill $food', function (context)
      return 'put ' .. context.named.food.plain .. ' on grill'
    end)
<


Note that each "match" is an object, containing both the `plain` output
(stripped of color symbols) and the `ansi` output (exactly what the server
sent, including color symbols).

The `context` object also includes `indexed` symbols in eg
`context.indexed[1]`.

If you don’t return anything from an Alias function, nothing will be sent. If
you want to handle sending yourself for whatever reason, you may use the
|kodachi-state:send| method.

==============================================================================
3. Scripting                                               *kodachi-scripting*

Most users will want to configure their connections using the provided Lua
scripting API.

WITH_CONNECTION                                      *kodachi-with_connection*

>
    require 'kodachi'.with_connection(URI, handler)
<


Your primary entrypoint, `with_connection` accepts a URI (eg:
`"yourmud.com:1234"`) and a handler function. The handler function is provided
a |kodachi-kodachistate| object on connected and also if the script is sourced
while connected.

KODACHISTATE                                            *kodachi-kodachistate*

The `KodachiState` object is provided to you from the |kodachi-with_connection|

                                                         *kodachi-state:alias*

state:alias                            Create an alias for the connection.
                                       Aliases allow you to reduce repeated
                                       work by automatically expanding simple
                                       phrases into more complex ones.


>
    s:alias(matcher, handler)
<


For most purposes, you can combine a |kodachi-simple-matcher| with a simple
handler, like so:

>
    s:alias('^grill $food', 'put $food on grill')
<


                                                           *kodachi-state:map*

state:map                              Create a normal-mode mapping. Similar to
                                       creating an nmap in vim, using this
                                       method will cause key sequences entered
                                       in normal mode in the connection buffer
                                       to trigger actions.


>
    s:map(keys, handler)
<


If a string is provided as the handler, that string will be sent literally.
More commonly, you may provide a function to be executed; that function will be
provided with the state object for you to then call |kodachi-state:send| with
whatever you want to send.

                                                            *kodachi-state:on*

state:on                               Register an event handler. Most
                                       commonly, you will probably want to use
                                       these to listen to "events." To do so,
                                       pass a `{ns, name}` table as the event
                                       parameter.


>
    s:on(event, handler)
<


For example, to listen to the `ROOM` var received over `MSDP`, use:

>
    s:on({"MSDP", "ROOM"}, function (room)
        -- Do something with the room object
    end)
<


                                                          *kodachi-state:send*

state:send                             Send the given String to the server.


>
    s:send(String)
<


                                                        *kodachi-state:prompt*

state:prompt                           Register a prompt. `handler` is
                                       optional, and may be used to transform
                                       the matched line before rendering.


>
    s:prompt(matcher, handler)
<


                                                       *kodachi-state:trigger*

state:trigger                          Register a trigger. Triggers "fire" when
                                       the `matcher` matches on a line received
                                       from the server.


>
    s:trigger(matcher, handler)
<


The handler of a trigger _must_ be a function.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
