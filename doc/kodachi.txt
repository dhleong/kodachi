*kodachi.txt*A tiny but powerful MUD client that lives in your favorite editor

==============================================================================
Table of Contents                                  *kodachi-table-of-contents*

1. kodachi                                                   |kodachi-kodachi|
2. Quick Start                                           |kodachi-quick-start|
  - Scripting                                              |kodachi-scripting|
3. Aliases, Triggers, and Prompts     |kodachi-aliases,-triggers,-and-prompts|
4. Matchers                                                 |kodachi-matchers|

==============================================================================
1. kodachi                                                   *kodachi-kodachi*

==============================================================================
2. Quick Start                                           *kodachi-quick-start*

Once installed, the quickest way to get started is with the `:KodachiConnect`
command.

SCRIPTING                                                  *kodachi-scripting*

In general you will want to create lua script files to manage your config for a
server. You may consider a naming convention to simplify auto-sourcing them,
since kodachi supports hot-reloading configs for an active connection; I use
`.kd.lua`.

Hereâ€™s a sample script:

>
    local kodachi = require 'kodachi'
    
    local uri = 'myfavorite.game:1234'
    
    kodachi.with_connection(uri, function(s)
      -- `s` is the "State" object, and has some goodies, like local mappings:
      s:map('gl', 'look')
    
      -- ... Triggers
      s:trigger('Hello!', function()
        s:send('say Hello yourself!')
      end
    
      -- ... and more
      s:prompt('> ')
    end)
<


==============================================================================
3. Aliases, Triggers, and Prompts     *kodachi-aliases,-triggers,-and-prompts*

==============================================================================
4. Matchers                                                 *kodachi-matchers*

Matchers power alias, prompts, and triggers. Kodachi supports two variants:
simple and regex. Simple matchers should be intuitive, with familiar syntax,
while regex gives you the full power to match exactly what you want. Regex
matchers are powered by the Rust regex <https://docs.rs/regex/latest/regex/>
crate; in particular, be aware that this crate does not support zero-width
lookaround assertions.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
